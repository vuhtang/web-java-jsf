plugins {
    id 'java'
    id 'war'
}

group 'com.vuhtang'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.platform:jakarta.jakartaee-api:9.1.0')
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.21.7'
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.10.Final'

}

test {
    useJUnitPlatform()
}

// Считываем переменные из файла параметров
def properties = new Properties()
file("gradle.properties").withInputStream { properties.load(it) }
def version = properties.getProperty('VERSION')
def mainClass = properties.getProperty('MAIN_CLASS')
def srcDir = properties.getProperty('SRC_DIR')
def testDir = properties.getProperty('TEST_DIR')
def binDir = properties.getProperty('BIN_DIR')
def testBinDir = properties.getProperty('TEST_BIN_DIR')
def libDir = properties.getProperty('LIB_DIR')
def jarName = properties.getProperty('JAR_NAME')


task compileProject(type: JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    classpath = sourceSets.main.compileClasspath
    source = srcDir
    destinationDirectory = file(binDir)
}

task buildProject(type: Jar) {
    dependsOn 'compileProject'
    manifest {
        attributes 'Main-Class': mainClass
    }

    from('build/classes/java/main') {
        include '**/*.class'
    }

    archiveFileName = jarName
    destinationDirectory = file('build/libs')
}

task cleanProject(type: Delete){
    delete 'build'
}
